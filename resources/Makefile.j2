MAKEFLAGS 				+= --warn-undefined-variables
SHELL 					:= bash
.DEFAULT_GOAL			:= help
URIBASE					:=	http://purl.obolibrary.org/obo
TMP_DATA				:=	{{ directories.tmp }}
{% if directories.root is defined %}
ROOT_DIR				:=	{{ directories.root }}
{% else %}
ROOT_DIR				:=	$(shell pwd)
{% endif %}
PHENOTYPE_DIR			:= $(ROOT_DIR)/data/phenotype
RUNNERS_DIR				:= $(ROOT_DIR)/runners
NAME					:= $(shell python -c 'import tomli; print(tomli.load(open("pyproject.toml", "rb"))["tool"]["poetry"]["name"])')
VERSION					:= $(shell python -c 'import tomli; print(tomli.load(open("pyproject.toml", "rb"))["tool"]["poetry"]["version"])')
SEMSIM_BASE_URL			:= https://storage.googleapis.com/data-public-monarchinitiative/semantic-similarity/latest



help: info
	@echo ""
	@echo "help"
	@echo "make setup -- this runs the download and extraction of genomic, phenotypic and runners data"
	@echo "make pheval -- this runs pheval pipeline corpus preparation and run"
	@echo "make all -- this runs the entire pipeline including setup, corpus preparation and pheval run"
	@echo "make help -- show this help"
	@echo ""

info:
	@echo "Project: $(NAME)"
	@echo "Version: $(VERSION)"

.PHONY: prepare-inputs

{%- for config in configs %}

{% if config.preprocessing is defined %}
SQL_DEPENDENCIES_{{ config.id }} = {%- for pp in config.preprocessing %} $(TMP_DATA)/semsim/{{ pp }} {%endfor %}

configurations/{{ config.id }}/config.yaml: $(RUNNERS_DIR)/exomiser-{{ config.version }} $(SQL_DEPENDENCIES_{{ config.id }})
	mkdir -p $(ROOT_DIR)/$(shell dirname $@)/

	cp -rf $(PHENOTYPE_DIR)/{{ config.phenotype }}_phenotype $(ROOT_DIR)/$(shell dirname $@)/{{ config.phenotype }}_phenotype
	cp $(RUNNERS_DIR)/configurations/{{ config.tool }}-{{ config.version }}-{{ config.phenotype }}_phenotype.config.yaml $(ROOT_DIR)/$(shell dirname $@)/config.yaml

	test -L $(ROOT_DIR)/$(shell dirname $@)/{{ config.phenotype }}_hg19  || ln -s $(PHENOTYPE_DIR)/{{ config.phenotype }}_hg19 $(ROOT_DIR)/$(shell dirname $@)/
	test -L $(ROOT_DIR)/$(shell dirname $@)/{{ config.phenotype }}_hg38 || ln -s $(PHENOTYPE_DIR)/{{ config.phenotype }}_hg38 $(ROOT_DIR)/$(shell dirname $@)/
	test -L $(ROOT_DIR)/$(shell dirname $@)/{{ config.phenotype }}_phenotype || ln -s $(RUNNERS_DIR)/{{ config.tool }}-{{ config.version }}/* $(ROOT_DIR)/$(shell dirname $@)/

 {%- for pp in config.preprocessing %}
	java -Xms128m -Xmx8192m -Dh2.bindAddress=127.0.0.1 -cp $(shell find $< -type f -name "h2*.jar") org.h2.tools.RunScript -url jdbc:h2:file:$(ROOT_DIR)/$(shell dirname $@)/{{ config.phenotype }}_phenotype/{{ config.phenotype }}_phenotype -script $(TMP_DATA)/semsim/{{ pp }} -user sa
 {%endfor %}

.PHONY: semsim-ingest
semsim-ingest: configurations/{{ config.id }}/config.yaml

{% else %}


{% if config.phenotype is defined %}

configurations/{{ config.id }}/config.yaml:
	mkdir -p $(ROOT_DIR)/$(shell dirname $@)/

	cp -rf $(PHENOTYPE_DIR)/{{ config.phenotype }}_phenotype $(ROOT_DIR)/$(shell dirname $@)/{{ config.phenotype }}_phenotype
	cp $(RUNNERS_DIR)/configurations/{{ config.tool }}-{{ config.version }}-{{ config.phenotype }}_phenotype.config.yaml $(ROOT_DIR)/$(shell dirname $@)/config.yaml

	test -L $(ROOT_DIR)/$(shell dirname $@)/{{ config.phenotype }}_hg19  || ln -s $(PHENOTYPE_DIR)/{{ config.phenotype }}_hg19 $(ROOT_DIR)/$(shell dirname $@)/
	test -L $(ROOT_DIR)/$(shell dirname $@)/{{ config.phenotype }}_hg38 || ln -s $(PHENOTYPE_DIR)/{{ config.phenotype }}_hg38 $(ROOT_DIR)/$(shell dirname $@)/
	test -L $(ROOT_DIR)/$(shell dirname $@)/{{ config.phenotype }}_phenotype || ln -s $(RUNNERS_DIR)/{{ config.tool }}-{{ config.version }}/* $(ROOT_DIR)/$(shell dirname $@)/
{% else %}

configurations/{{ config.id }}/config.yaml:
	mkdir -p $(ROOT_DIR)/$(shell dirname $@)/
	cp $(RUNNERS_DIR)/configurations/{{ config.tool }}-{{ config.version }}.config.yaml $(ROOT_DIR)/$(shell dirname $@)/config.yaml
{% endif %}



{% endif %}

{% endfor %}
.PHONY: prepare-corpora


$(TMP_DATA)/semsim/%.tsv:
	mkdir -p $(TMP_DATA)/semsim/
	wget $(SEMSIM_BASE_URL)/$*.tsv -O $@


$(TMP_DATA)/semsim/%.sql:
	mkdir -p $(TMP_DATA)/semsim/
	wget $(SEMSIM_BASE_URL)/$*.sql -O $@



{% for run in runs %}
$(ROOT_DIR)/results/{{ run.configuration }}-{{ run.corpus }}-{{ run.corpusvariant }}/results.yml: configurations/{{ run.configuration }}/config.yaml corpora/{{ run.corpus }}/{{ run.corpusvariant }}/corpus.yml

	mkdir -p $(shell dirname $@)

{% if  run.tool  == "phen2gene" %}
	ln -s $(RUNNERS_DIR)/Phen2Gene/* $(ROOT_DIR)/configurations/{{ run.configuration }}/
{% endif %}

	pheval run \
	 --input-dir $(ROOT_DIR)/configurations/{{ run.configuration }} \
	 --testdata-dir $(ROOT_DIR)/corpora/{{ run.corpus }}/{{ run.corpusvariant }} \
	 --runner {{ run.tool }}phevalrunner \
	 --tmp-dir {{ directories.tmp }}/ \
	 --version {{ run.version }} \
	 --output-dir $(shell dirname $@)

	touch $@

.PHONY: pheval-run
pheval-run: $(ROOT_DIR)/results/{{ run.configuration }}-{{ run.corpus }}-{{ run.corpusvariant }}/results.yml


$(ROOT_DIR)/results/{{ run.configuration }}/run_data.yaml:
	printf '%s\n' \
	"benchmark_name: fake_predictor_benchmark" \
	"runs:" \
	"  - run_identifier: run_identifier_1" \
	"    results_dir: $(shell dirname $@)" \
	"    phenopacket_dir: $(ROOT_DIR)/corpora/lirical/default/phenopackets" \
	"    gene_analysis: True" \
	"    variant_analysis: False" \
	"    disease_analysis: False" \
	"    threshold:" \
	"    score_order: descending" \
	"plot_customisation:" \
	"  gene_plots:" \
	"    plot_type: bar_cumulative" \
	"    rank_plot_title:" \
	"    roc_curve_title: " \
	"    precision_recall_title: " \
	"  disease_plots:" \
	"    plot_type: bar_cumulative" \
	"    rank_plot_title:" \
	"    roc_curve_title: " \
	"    precision_recall_title: " \
	"  variant_plots:" \
	"    plot_type: bar_cumulative" \
	"    rank_plot_title: " \
	"    roc_curve_title: " \
	"    precision_recall_title: " \
	> $@

$(ROOT_DIR)/results/{{ run.configuration }}/gene_rank_stats.svg: $(ROOT_DIR)/results/{{ run.configuration }}/run_data.yaml
	pheval-utils generate-benchmark-stats -r $<

.PHONY: pheval-report
pheval-report: $(ROOT_DIR)/results/{{ run.configuration }}/gene_rank_stats.svg


{% endfor %}


{%- for corpus in corpora -%}

{% if  corpus.id  == "lirical" %}

corpora/{{ corpus.id }}/{{ corpus.variant }}/corpus.yml:
	test -d $(ROOT_DIR)/corpora/{{ corpus.id }}/{{ corpus.variant }}/ || mkdir -p $(ROOT_DIR)/corpora/{{ corpus.id }}/{{ corpus.variant }}/

	test -L $(ROOT_DIR)/corpora/{{ corpus.id }}/{{ corpus.variant }}/template_exome_hg19.vcf.gz || ln -s $(ROOT_DIR)/testdata/template_vcf/template_exome_hg19.vcf.gz $(ROOT_DIR)/corpora/{{ corpus.id }}/{{ corpus.variant }}/template_exome_hg19.vcf.gz
	pheval-utils create-spiked-vcfs \
		--hg19-template-vcf $(ROOT_DIR)/corpora/{{ corpus.id }}/{{ corpus.variant }}/template_exome_hg19.vcf.gz  \
		--phenopacket-dir=$(ROOT_DIR)/corpora/{{ corpus.id }}/{{ corpus.variant }}/phenopackets \
		--output-dir $(ROOT_DIR)/corpora/{{ corpus.id }}/{{ corpus.variant }}/vcf
	touch $@
{% endif %}

{% if  corpus.id  == "phenopacket-store" %}

corpora/{{ corpus.id  }}/{{ corpus.variant }}/corpus.yml: $(TMP_DATA)/all_phenopackets/all_phenopackets.zip
	mkdir -p corpora/{{ corpus.id }}/{{ corpus.variant }}/phenopackets/
	pheval-utils prepare-corpus -p $(TMP_DATA)/all_phenopackets/unpacked_phenopackets --gene-analysis -g ensembl_id -o $(ROOT_DIR)/$(shell dirname $@)/
	touch $@
	#temporary
	touch $@
{% endif %}

{%- if corpus.scrambled is defined -%}
{%- for scrambled in corpus.scrambled -%}
corpora/{{ corpus.id }}/scrambled-{{ scrambled.factor }}/corpus.yml: corpora/{{ corpus.id }}/{{ corpus.variant }}/corpus.yml $(ROOT_DIR)/testdata/template_vcf/template_exome_hg19.vcf.gz
	test -d $(ROOT_DIR)/corpora/{{ corpus.id }}/scrambled-{{ scrambled.factor }}/ || mkdir -p $(ROOT_DIR)/corpora/{{ corpus.id }}/scrambled-{{ scrambled.factor }}/
	test -L $(ROOT_DIR)/corpora/{{ corpus.id }}/scrambled-{{ scrambled.factor }}/template_exome_hg19.vcf.gz || ln -s $(ROOT_DIR)/testdata/template_vcf/template_exome_hg19.vcf.gz $(ROOT_DIR)/corpora/{{ corpus.id }}/scrambled-{{ scrambled.factor }}/template_exome_hg19.vcf.gz

	pheval-utils create-spiked-vcfs \
	 --hg19-template-vcf $(ROOT_DIR)/corpora/{{ corpus.id }}/scrambled-{{ scrambled.factor }}/template_exome_hg19.vcf.gz  \
	 --phenopacket-dir=$(shell dirname $<)/phenopackets \
	 --output-dir $(ROOT_DIR)/$(shell dirname $@)/vcf

	test -d $(shell dirname $@)/phenopackets || mkdir -p $(shell dirname $@)/phenopackets
	pheval-utils scramble-phenopackets \
	 --scramble-factor {{ scrambled.factor }} \
	 --output-dir $(ROOT_DIR)/$(shell dirname $@)/phenopackets \
	 --phenopacket-dir=$(shell dirname $<)/phenopackets

	touch $@

prepare-corpora: corpora/{{ corpus.id }}/scrambled-{{ scrambled.factor }}/corpus.yml

{%- endfor -%}

{% for custom_corpus in corpus.custom_variants -%}
corpora/{{ corpus.id }}/{{ custom_corpus.id }}/corpus.yml: $(ROOT_DIR)/testdata/template_vcf/template_exome_hg19.vcf.gz
	echo "error $@ needs to be configured manually" && false
{%- endfor -%}

{% endif %}
{% endfor %}


.PHONY: pheval
pheval:
	$(MAKE) prepare-inputs
	$(MAKE) prepare-corpora
	$(MAKE) pheval-run
	$(MAKE) pheval-report

.PHONY: all
all:
	$(MAKE) setup
	$(MAKE) pheval

include ./resources/custom.Makefile
